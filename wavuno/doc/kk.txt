`timescale 1ns / 1ps
`default_nettype none

module wavuno(
    // Main clock, 28 MHz
    input wire clk28,

    // Turbo setting input
    input wire [1:0] turbo_enable,
    
    // Spectrum interface
    input wire [7:0] zxuno_addr,
    input wire zxuno_regrd,
    input wire zxuno_regwr,
    input wire [7:0] din,
    output reg [7:0] dout,
    output reg oe_n,
    
    // RAM interface
    output wire [20: 0] exp_sram_addr,
    inout wire [7: 0] exp_sram_data,
    output wire exp_sram_we_n,
    
    // Audio output
    output reg [7: 0] audio_out
    );

    // The RAM and RAM address lengths
    parameter RAM_ADDR_LENGTH = 21;
    parameter RAM_LENGTH = 2 ** RAM_ADDR_LENGTH;
    
    // Access ports values
    parameter ZXUNO_DATA_REG = 8'hFA;
    parameter ZXUNO_STATUS_REG = 8'hFB;

    // 
    // WavUno Registers
    //
    // 0 is LSByte

    parameter WAVUNO_REG_USER_POINTER0 = 0;
    parameter WAVUNO_REG_USER_POINTER1 = 1;
    parameter WAVUNO_REG_USER_POINTER2 = 2;
    
    parameter WAVUNO_REG_SAMPLE_WRITE = 3;
    parameter WAVUNO_REG_SAMPLE_READ = 4;
    
    parameter WAVUNO_REG_CONTROL_FORMAT = 5;
    parameter WAVUNO_REG_CONTROL_REPROD = 6;
    
    parameter WAVUNO_REG_FREQ_DIVIDER0 = 7;
    parameter WAVUNO_REG_FREQ_DIVIDER1 = 8;
    
    parameter WAVUNO_REG_START_LOOP0 = 9;
    parameter WAVUNO_REG_START_LOOP1 = 10;
    parameter WAVUNO_REG_START_LOOP2 = 11;

    parameter WAVUNO_REG_END_LOOP0 = 12;
    parameter WAVUNO_REG_END_LOOP1 = 13;
    parameter WAVUNO_REG_END_LOOP2 = 14;

    //
    // Accessible registers
    //
    
    // This register selects which wavuno register is accessed through ZXUNO_DATA_REG ZX-Uno register
    reg [7: 0] statusReg = 8'b0;

    // Z80 read/write pointer to sram
    reg [20: 0] userPointer = 0;

    // Register for reading the sram
    reg [7: 0] sampleReadRegister = 8'b0;
    
    // Format Control Register
    reg [7: 0] controlRegisterFormat = 8'b0;
    
    // Control register 1
    reg [7: 0] controlRegisterReprod = 8'b0;
    
    // Channel 0 frequency divider
    reg [15: 0] frequencyDivider = 16'd159;

    // loop start address
    reg [20: 0] loopStart = 0;

    // loop end address
    reg [20: 0] loopEnd = 0;
    
    // loop start preload register
    reg [20: 8] loopStartPre = 0;
    
    // loop end preload register
    reg [20: 8] loopEndPre = 0;
    
    //
    // Internal registers
    //

    // Register of output address to sram
    reg [RAM_ADDR_LENGTH-1: 0] outputAddress = 0;

    // We need to divide the Z80 accesses to half (I don't know why). This flip flop is for that.
    reg toggleFlag = 1'b0;

    // Register that divides the 28 MHz clock in eight phases, 0 to 7
    reg [2: 0] clkDivider = 3'b0;

    // Position of next Z80 turn, counted in phases
    reg [2: 0] z80Pos = 3'b0;

    // Length of current Z80 turn, counted in phases
    reg [2: 0] cpuCount = 3'b0;
    
    // Tells if currently in the first phase of Z80 turn
    reg cpuActive = 1'b1;

    // Channel registers
    
    // *** TODO rename to channelTurn
    reg [1: 0] playCount = 2'b0;

    // Sound sample frequency divider
    reg [7: 0] sampleClk = 8'b0;

    // Current playing pointer to sram, channel 0
    reg [RAM_ADDR_LENGTH-1: 0] playPointer = 0;



    // Write signal to the sram
    assign exp_sram_we_n = ! (
           zxuno_regrd == 1'b0 &&
           zxuno_regwr == 1'b1 &&
           zxuno_addr == ZXUNO_DATA_REG &&
           statusReg == WAVUNO_REG_SAMPLE_WRITE );

    // Data to the sram or high impedance for reading
    assign exp_sram_data = (exp_sram_we_n == 1'b0)? din : 8'hZZ;

    // sram address comes from register outputAddress
    assign exp_sram_addr = outputAddress;

    // Reading from the Z80 asynchronously
    always @* begin

        dout = 8'hZZ;
        oe_n = 1'b1;
        
        if ( zxuno_regrd == 1'b1 ) begin
            
            if ( zxuno_addr == ZXUNO_DATA_REG ) begin
            
                case ( statusReg )

                    WAVUNO_REG_USER_POINTER0: dout = userPointer[7: 0];
                    
                    WAVUNO_REG_USER_POINTER1: dout = userPointer[15: 8];
                    
                    WAVUNO_REG_USER_POINTER2: dout = { 3'b0, userPointer[20: 16] };
                    
                    WAVUNO_REG_SAMPLE_READ: dout = sampleReadRegister;
                    
                    WAVUNO_REG_CONTROL_FORMAT: dout = controlRegisterFormat;
                    
                    WAVUNO_REG_CONTROL_REPROD: dout = controlRegisterReprod;
                    
                    WAVUNO_REG_FREQ_DIVIDER0: dout = frequencyDivider[7: 0];
                    
                    WAVUNO_REG_FREQ_DIVIDER1: dout = frequencyDivider[15: 8];

                    WAVUNO_REG_START_LOOP0: dout = loopStart[7: 0];

                    
                    default: dout = 8'b0;

                endcase

                oe_n = 1'b0;
            
            end
            else if ( zxuno_addr == ZXUNO_STATUS_REG ) begin
                // Read the status register
                dout = statusReg;
                oe_n = 1'b0;
            end                
                
        end

    end

    always @(posedge clk28) begin

        // if z80Pos is the next phase...
        if ( z80Pos == ( clkDivider + 3'b1 ) ) begin

            // Update z80Pos
            if ( turbo_enable > 2'b00 ) begin
                z80Pos <= z80Pos + ( 4'd8 >> turbo_enable );
            end
            
            // Update cpuCount, number of phases left off Z80 turn
            cpuCount <= ( 3'd4 >> turbo_enable );
            
            // Z80 access begins to be active now. This flag is only up for 1 phase, but
            // the sram wr signal is active for cpuCount phases
            cpuActive <= 1;

        end
        
        // Main clock divider in eight phases
        clkDivider <= clkDivider + 3'b1;

        if ( cpuCount > 3'b0 ) begin
        
            // It is the Z80 turn
            
            // Check if it is the first phase of the Z80 turn
            if ( cpuActive == 1'b1 ) begin

                // Z80 writing
                if ( zxuno_regrd == 1'b0 && zxuno_regwr == 1'b1 ) begin
                    if ( zxuno_addr == ZXUNO_DATA_REG ) begin
    
                        // Don't know why I must ignore 1 out of 2 writes
                        if ( toggleFlag == 1'b0 ) begin
                        
                            // Select register to write
                            case ( statusReg )
                                
                                WAVUNO_REG_USER_POINTER0: userPointer[7: 0] <= din;
                                
                                WAVUNO_REG_USER_POINTER1: userPointer[15: 8] <= din;
                                
                                WAVUNO_REG_USER_POINTER2: userPointer[20: 16] <= din[4: 0];

                                WAVUNO_REG_SAMPLE_WRITE: begin
                                    outputAddress <= userPointer[RAM_ADDR_LENGTH-1: 0];
                                    userPointer <= userPointer + 1;
                                end

                                WAVUNO_REG_SAMPLE_READ: begin
                                    outputAddress <= userPointer;
                                    userPointer <= userPointer + 1;
                                    sampleReadRegister <= exp_sram_data;
                                end

                                WAVUNO_REG_CONTROL_FORMAT: controlRegisterFormat <= din;

                                WAVUNO_REG_CONTROL_REPROD: begin
                                    controlRegisterReprod <= din;
                                    if ( din[ 0 ] == 1'b1 ) begin
                                        playPointer <= loopStart;
                                    end
                                end

                                WAVUNO_REG_START_LOOP0: loopStart <= { loopStartPre, din };

                                WAVUNO_REG_START_LOOP1: loopStartPre[15: 8] <= din;
                    
                                WAVUNO_REG_START_LOOP2: loopStartPre[20: 16] <= din[4: 0];

                                WAVUNO_REG_END_LOOP0: loopEnd <= { loopEndPre, din };

                                WAVUNO_REG_END_LOOP1: loopEndPre[15: 8] <= din;
                    
                                WAVUNO_REG_END_LOOP2: loopEndPre[20: 16] <= din[4: 0];

                            endcase

                        end
     
                        toggleFlag <= ! toggleFlag;
        
                    end
                    else if ( zxuno_addr == ZXUNO_STATUS_REG ) begin
                        statusReg <= din;
                    end
                end
            
                cpuActive <= 1'b0;
            
            end

            cpuCount <= cpuCount - 3'b1;

        end
        else begin
        
            // Reproduction turn
        
            if ( playCount == 2'b00 ) begin
            
                if ( controlRegisterReprod[0] == 1'b1 ) begin
                    if ( sampleClk == frequencyDivider ) begin

                        outputAddress <= playPointer;
                        audio_out <= exp_sram_data;
                        sampleClk <= 8'b0;
                        
                        if ( playPointer == loopEnd ) begin
                            playPointer <= loopStart;
                            if ( ! controlRegisterFormat[ 0 ] ) begin
                                audio_out <= 0;
                                controlRegisterReprod[0] <= 0;
                            end
                        end
                        else begin
                            playPointer <= playPointer + 1;
                        end
                    end
                    else begin
                        sampleClk <= sampleClk + 1;
                    end
                end
            
            end
            
            playCount <= playCount + 1;

        end

    end
    
endmodule
